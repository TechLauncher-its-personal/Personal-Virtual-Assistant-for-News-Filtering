extends layout
include device_selector

block styles
  link(rel='stylesheet', href=Config.ASSET_CDN + '/stylesheets/thingpedia.css')
  link(rel='stylesheet', href=Config.ASSET_CDN + '/stylesheets/dev_sidebar.css')
  link(rel='stylesheet', href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/atom-one-light.min.css")

block scripts
  script(src=Config.ASSET_CDN + '/javascripts/device-selector.js')
  script(src=Config.ASSET_CDN + '/javascripts/dev-console-nlp-models-bundle.js')

block page_name
  - stdlayout = false;
  - var section = 'models';
  = _("Developer Console")

block content
  div.container-fluid#page-body
    div.row
      div.col-lg-3.col-md-4
        include dev_sidebar

      div.col-xs-12.col-md-8.col-lg-9
        section.divider
          h3= _("Your LUInet Models")

          div.alert.alert-warning(role='alert')
            p= _("Caution! Uploading custom template packs and training custom LUInet models is an experimental feature.")

          if models.length > 0
            ul.list-group
              each m in models
                li.list-group-item
                  h4= _("%s (%s)").format(m.tag, I18n.getLangName(_, m.language))

                  p.pull-right
                    a(href='#train-dialog-' + m.tag.replace(/\./g, '-') + '-' + m.language,data-toggle='modal').btn.btn-sm.btn-default= _("Train")
                    div.modal.fade(role='dialog',id='train-dialog-'+ m.tag.replace(/\./g, '-') + '-' + m.language)
                      div.modal-dialog
                        div.modal-content
                          div.modal-header
                            a.close(data-dismiss='modal', aria-label="Close")
                              span(aria-hidden='true') ×
                            h4.modal-title= _("Train Model")
                          form(action='/luinet/models/train', method='post', data-toggle='validator')
                            div.modal-body
                              input(type='hidden',name='_csrf',value=csrfToken)
                              input(type='hidden',name='language',value=m.language)
                              input(type='hidden',name='tag',value=m.tag)
                              p
                                =_("Would you like to train the model %s on the current %s dataset?").format(m.tag, I18n.getLangName(_, m.language))
                                if m.access_token
                                  = ngettext(" Training will cost you %d credit.", " Training will cost you %d credits.", trainPrivateCost).format(trainPrivateCost)
                                else
                                  = ngettext(" Training will cost you %d credit.", " Training will cost you %d credits.", trainPublicCost).format(trainPublicCost)
                            div.modal-footer
                              div.form-group
                                button(type='submit').btn.btn-primary= _("Train")

                  p
                    if m.current_job
                      if m.current_job.status === 'queued'
                         = _("Status: queued for training.")
                      else
                         = _("Status: training (%.0f%%).").format(m.current_job.progress*100)
                      |
                      |
                      if m.current_job.eta
                        = _("ETA: %s").format((new Date(m.current_job.eta)).toLocaleString(locale, { timeZone: user.timezone, year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', 'minute': 'numeric' }))
                    else if m.trained
                      = _("Status: deployed.")
                    else
                      = _("Status: not trained yet.")

                  if user.developer_status > Constants.DeveloperStatus.USER && m.access_token
                    p
                      = _("Access Token: ")
                      a(href='#',data-toggle='collapse',data-target='#secret-' + m.tag.replace(/\./g, '-') + '-' + m.language)= _("Show/Hide")
                    div.collapse(id='secret-' + m.tag.replace(/\./g, '-') + '-' + m.language)= m.access_token
                  p
                    a(href='#',data-toggle='collapse',role='button',data-target='#details-' + m.tag.replace(/\./g, '-') + '-' + m.language).btn.btn-default.btn-sm= _("Show/Hide Details")
                  div.collapse(id='details-' + m.tag.replace(/\./g, '-') + '-' + m.language)
                    if m.metrics
                      h5= _("Current metrics: ")
                      p= _("Accuracy: %.2f%%").format(100 * m.metrics.ok)
                      p= _("Function Accuracy: %.2f%%").format(100 * m.metrics.ok_function)
                      p= _("Device Accuracy: %.2f%%").format(100 * m.metrics.ok_device)
                      p= _("Syntax Accuracy: %.2f%%").format(100 * m.metrics.ok_syntax)

                    p= _("Template Pack: %s").format(m.template_file_name)
                    p= _("Flags: %s").format(m.flags.join(_(", ")))

                    if m.all_devices
                      if m.use_approved
                        p!= _("Devices: <i>all</i> (approved only)")
                      else
                        p!= _("Devices: <i>all</i>")
                    else
                      p
                        = _("Devices: ")
                        - var first = true;
                        each d in m.for_devices
                          if !first
                            | ,
                            |
                            |
                          - first = false;
                          a(href=Config.THINGPEDIA_URL + '/devices/by-id/' + d)= d

                    if m.trained_config && m.trained_config !== m.config
                      h5= _("Hyper-parameters (next training):")
                      pre
                        code.json= JSON.stringify(JSON.parse(m.config), undefined, 2)
                      h5= _("Hyper-parameters (last successful training):")
                      pre
                        code.json= JSON.stringify(JSON.parse(m.config), undefined, 2)
                    else
                      h5= _("Hyper-parameters:")
                      pre
                        code.json= JSON.stringify(JSON.parse(m.config), undefined, 2)

          else
            div.row
              div.col-xs-12
                p= _("Your organization does not own any LUInet model yet.")

          if user.developer_status > Constants.DeveloperStatus.USER
            div.row
              div.col-sm-6.col-md-4.col-sm-offset-3.col-md-offset-4
                a(href='#new-model-dialog',data-toggle='modal').btn.btn-block.btn-primary= _("Create a new model")
            div.modal.fade(role='dialog')#new-model-dialog
              div.modal-dialog
                div.modal-content
                  div.modal-header
                    a.close(data-dismiss='modal', aria-label="Close")
                      span(aria-hidden='true') ×
                    h4.modal-title= _("New LUInet Model")
                  form(action='/luinet/models/create', method='post', data-toggle='validator')
                    div.modal-body
                      input(type='hidden',name='_csrf',value=csrfToken)
                      div.form-group
                        label(for='new-model-name').control-label= _("ID")
                        input(type='text',name='tag',required=true).form-control#new-model-name
                        span.help-block= _("The unique name of your model. This should be a namespaced name like “org.example” or “com.mything”.")

                      div.form-group
                        label(for='new-model-locale').control-label= _("Language")
                        select(name='language',required=true).form-control#new-model-locale
                          for lang, i in Config.SUPPORTED_LANGUAGES
                            option(value=lang,selected=(i===0))= I18n.getLangName(_, lang)

                      div.form-group
                        label(for='new-model-template').control-label= _("Template pack")
                        input(type='text',name='template',required=true).form-control#new-model-template
                        span.help-block= _("The ID of the template pack to use when generating the dataset for this model.")

                      div.form-group
                        label(for='new-model-flags').control-label= _("Flags")
                        input(type='text',name='flags').form-control#new-model-flags
                        span.help-block= _("Template flags to enable.")

                      +device_selector('new-model-devices', 'for_devices', _("Devices"), _("Choose which devices to include in your model, or choose none to include all available devices."))

                      div.form-group
                        label(for='new-model-config').control-label= _("Hyper-parameters")
                        textarea(name='config').form-control#new-model-config
                          = defaultModelConfig

                      div.form-group
                        div.checkbox
                          label(for='new-model-use-approved').control-label
                            input(type='checkbox',name='use_approved',value='1',checked=false)#new-model-use-approved
                            = _(" Use approved version of the devices.")

                      div.form-group
                        div.checkbox
                          label(for='new-model-use-exact').control-label
                            input(type='checkbox',name='use_exact',value='1',checked=true)#new-model-use-exact
                            = _(" Include a match on the exact form of the primitive templates in addition to the predicted results from the neural network.")

                      div.form-group
                        div.checkbox
                          label(for='new-model-public').control-label
                            input(type='checkbox',name='public',value='1',checked=false)#new-model-public
                            = _(" This model is public for everyone to use.")

                    div.modal-footer
                      div.form-group
                        button(type='submit').btn.btn-primary= _("Create")

        section.divider
          h3= _("Your LUInet Template Packs")

          if templatePacks.length > 0
            ul.list-group
              each m in templatePacks
                li.list-group-item
                  h4= _("%s (%s)").format(m.tag, m.language)
                  p= m.description
                  p= _("Available flags: %s").format(JSON.parse(m.flags).join(_(", ")))
                  p= _("Version: %d").format(m.version)
                  if m.public
                    p.text-muted= _("Public")
                  else
                    p.text-muted= _("Private")

          else
            div.row
              div.col-xs-12
                p= _("Your organization does not own any LUInet template pack yet.")

          if user.developer_status > Constants.DeveloperStatus.USER
            div.row
              div.col-sm-6.col-md-4.col-sm-offset-3.col-md-offset-4
                a(href='#new-template-dialog',data-toggle='modal').btn.btn-block.btn-primary= _("Upload a new template pack")
            div.modal.fade(role='dialog')#new-template-dialog
              div.modal-dialog
                div.modal-content
                  div.modal-header
                    a.close(data-dismiss='modal', aria-label="Close")
                      span(aria-hidden='true') ×
                    h4.modal-title= _("New LUInet Template Pack")
                  form(action='/luinet/templates/create', enctype='multipart/form-data', method='post', data-toggle='validator')
                    div.modal-body
                      input(type='hidden',name='_csrf',value=csrfToken)
                      div.form-group
                        label(for='new-template-name').control-label= _("ID")
                        input(type='text',name='tag',required=true).form-control#new-template-name
                        span.help-block= _("The unique name of your template pack. This should be a namespaced name like “org.example” or “com.mything”.")

                      div.form-group
                        label(for='new-template-description').control-label= _("Description")
                        input(type='text',name='description',required=true).form-control#new-template-description
                        span.help-block= _("This description will be shown on the documentation")

                      div.form-group
                        label(for='new-template-locale').control-label= _("Language")
                        select(name='language',required=true).form-control#new-template-locale
                          for lang, i in Config.SUPPORTED_LANGUAGES
                            option(value=lang,selected=(i===0))= I18n.getLangName(_, lang)

                      div.form-group
                        label(for='new-template-flags').control-label= _("Flags")
                        input(type='text',name='flags').form-control#new-template-flags
                        span.help-block= _("Multiple flags can be separated by a comma or space.")

                      div.form-group
                        label(for='new-template-upload').control-label= _("Template pack")
                        input(type='file',name='upload',accept='application/zip',required=true)#new-template-upload
                        span.help-block= _("The zip file containing the Genie templates and all necessary support code. The primary template module should be called index.genie.")

                      div.form-group
                        div.checkbox
                          label(for='new-template-public').control-label
                            input(type='checkbox',name='public',value='1',checked=false)#new-template-public
                            = _(" This template is public for everyone to use.")

                    div.modal-footer
                      div.form-group
                        button(type='submit').btn.btn-primary= _("Upload")

        section.divider
          h3= _("Custom Datasets")

          div.alert.alert-info(role='alert')
            p= _("Note: custom datasets are automatically deleted one week after generation.")

          table.table
            thead
              th= _("Job ID")
              th= _("Pipeline")
              th= _("Status")
              th= _("Size")
              th= _("Actions")

            tbody
              for job in customDatasetJobs
                tr
                  td= job.id
                  td
                    if job.job_type === 'gen-custom-synthetic'
                      = _("Synthetic only")
                    else if job.job_type === 'gen-custom-augmented'
                      = _("Synthetic + paraphrase + augmentation")
                    else if job.job_type === 'gen-custom-turking'
                      = _("Synthetic for paraphrase")
                  td
                    if job.status === 'queued'
                      = _("queued")
                    else if job.status === 'started'
                      = _("in progress (%.0f%%)").format(job.progress*100)
                    else if job.status === 'failed'
                      = _("failed")
                    else if job.status === 'success'
                      = _("ready")
                  td
                    if job.status === 'success'
                      = JSON.parse(job.metrics).dataset_size
                    else
                      = _("n/a")
                  td
                    if job.status === 'success'
                      a(href='/luinet/custom-datasets/download/' + job.id)= _("Download")

          if user.developer_status > Constants.DeveloperStatus.USER
            div.row
              div.col-sm-6.col-md-4.col-sm-offset-3.col-md-offset-4
                a(href='#new-dataset-dialog',data-toggle='modal').btn.btn-block.btn-primary= _("Generate a new custom dataset")
            div.modal.fade(role='dialog')#new-dataset-dialog
              div.modal-dialog
                div.modal-content
                  div.modal-header
                    a.close(data-dismiss='modal', aria-label="Close")
                      span(aria-hidden='true') ×
                    h4.modal-title= _("New Custom Dataset")
                  form(action='/luinet/custom-datasets/create', method='post', data-toggle='validator')
                    div.modal-body
                      input(type='hidden',name='_csrf',value=csrfToken)

                      div.form-group
                        label(for='new-dataset-job-type').control-label= _("Pipeline")
                        select(name='job_type',required=true).form-control#new-dataset-job-type
                          option(value='gen-custom-synthetic',selected=true)= _("Synthetic only")
                          option(value='gen-custom-augmented')= _("Synthetic + paraphrase + augmentation")
                          option(value='gen-custom-turking')= _("Synthetic for paraphrase")

                      div.form-group
                        label(for='new-dataset-locale').control-label= _("Language")
                        select(name='language',required=true).form-control#new-dataset-locale
                          for lang, i in Config.SUPPORTED_LANGUAGES
                            option(value=lang,selected=(i===0))= I18n.getLangName(_, lang)

                      div.form-group
                        label(for='new-dataset-template').control-label= _("Template pack")
                        input(type='text',name='template',required=true).form-control#new-dataset-template
                        span.help-block= _("The ID of the template pack to use when generating the dataset.")

                      div.form-group
                        label(for='new-dataset-flags').control-label= _("Flags")
                        input(type='text',name='flags').form-control#new-dataset-flags
                        span.help-block= _("Template flags to enable.")

                      +device_selector('new-dataset-devices', 'for_devices', _("Devices"), _("Choose which devices to include in your dataset, or choose none to include all available devices."))

                      div.form-group
                        label(for='new-dataset-config').control-label= _("Hyper-parameters")
                        textarea(name='config').form-control#new-dataset-config
                          = defaultCustomDatasetConfig

                    div.modal-footer
                      div.form-group
                        button(type='submit').btn.btn-primary= _("Generate")
